// Provides convenience access to methods on Futures

import NIO

public protocol FutureConvenienceCallable {}

{% for type in types.based.FutureConvenienceCallable %}
public extension EventLoopFuture where T == {{ type.name }} {

{% for method in type.instanceMethods where method.returnTypeName|hasPrefix:"EventLoopFuture" and method.accessLevel == "public" %}
    /// Convenience accessor that calls {{ method.selectorName }} on the {{ type.name|lowercase }} after the future has completed.
    ///
    /// For documentation on this method, refer to `{{ type.name }}.{{ method.selectorName }}`
    public func {{ method.name }} {% if method.throws %}throws {% endif %}-> {{ method.returnTypeName }} {
        return self.then { {{ type.name|lowercase }} in
            return {{ type.name|lowercase }}.{{ method.callName }}({#
                #}{% for param in method.parameters %}{#
                #}{% if param.argumentLabel %}{{ param.argumentLabel }}: {% endif %}{{ param.name }}{% if not forloop.last %},{% endif %}{#
                #}{% endfor %}{#
            #})
        }
    }

{% endfor %}
}

{% endfor %}
public extension EventLoopFuture where T == Database {
    public subscript(collection: String) -> EventLoopFuture<MongoKitten.Collection> {
        return self.map { $0[collection] }
    }
}
